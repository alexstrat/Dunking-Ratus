#define NOCOLOR 0
#define RED 1
#define BLUE 2
#define NEAR 15
#define RIGHT 0
#define LEFT 1
#define RANDOM 2

int COLOR=NOCOLOR;
int COMPASS_REF;
int READY2DUNK=0;
int DUNKED=0;
mutex Clock;
mutex R2Dlock;
mutex Dlock;
task findBall();
task dunk();
task randomWalk();
task walkToBasket();
task victoryLapDance();
task debug(); //A FAIRE


int init()  //initialise les capteurs et le generateur aleatoire
{
SetSensor(S1,SENSOR_TOUCH); //Configure l'entree 1 en touch sensor
SetSensorLowspeed(S2); //Configure l'entree 2 en light sensor
SetSensorLowspeed(S3); //Configure l'entree 3 en compass sensor
SetSensorLowspeed(S4); //Configure l'entree 3 en ultrasound sensor
}

safecall int getCompass()  //acces protege au compas
{
return SensorHTCompass(S3);
}


safecall int getTouch()
{
return Sensor(S1);
}

safecall int getUltraSound()  //acces protege a l'ultrason
{
return SensorUS(S4);
}


safecall int getColor()
{
byte red;
byte blue;
byte green;
byte colorNum;
ReadSensorHTColor(S2,colorNum,red, green, blue);
if(red>120)
{
return RED;
}
else
{
if(blue>120)
{
return BLUE;
}
else
{
return NOCOLOR;
}
}
}


void turn(int dir)  //quart de tour (aléatoire, ou pas)
{
//int ref=getCompass();
int rightORleft = (dir==RANDOM) ? Random(2) : dir;
if(rightORleft==RIGHT)
{
//while(getCompass()<ref+70)
{
OnFwd(OUT_A, 35);
OnRev(OUT_C,35);
Wait(2000);
}
Coast(OUT_AC);
}
else
{
//while(getCompass()>ref-70)
{
OnFwd(OUT_C, 35);
OnRev(OUT_A,35);
Wait(2000);
}
Coast(OUT_AC);
}
}


void reposition(int dest, int speed)
{
if(getCompass()>=dest)
{
while(getCompass()>=dest)
{
OnFwd(OUT_C, speed);
OnRev(OUT_A, speed);
Wait(100);
}
}
else
{
while(getCompass()<=dest)
{
OnFwd(OUT_A, 20);
OnRev(OUT_C,20);
Wait(100);
}
}
Coast(OUT_AC);
}


task randomWalk()  //random walk
{
int color=NOCOLOR;
Acquire(Dlock);
DUNKED=0;
Release(Dlock);
OnFwd(OUT_AC,50);
while(color==NOCOLOR)
//while(true)
{
if(getUltraSound()<NEAR)  //si il y a un obstacle
{
Coast(OUT_AC);          //arrete d'avancer
turn(RANDOM);           //tourne
OnFwd(OUT_AC,50);       //redemarre
}
Wait(250);             //tempo
Acquire(Clock);
color=COLOR;
Release(Clock);
}
ExitTo(walkToBasket);
}

task walkToBasket()
{
//TODO
reposition(COMPASS_REF,50);
Wait(1000);
reposition(COMPASS_REF,20);
OnRev(OUT_AC,40);
int dunk=0;
while(dunk==0)
{
Wait(500);
Acquire(Dlock);
dunk=DUNKED;
Release(Dlock);
}
Acquire(Clock);
COLOR=NOCOLOR;
Release(Clock);
ExitTo(victoryLapDance);
}

task victoryLapDance()
{
OnFwd(OUT_AC, 50);
Wait(2000);
Coast(OUT_AC);
RotateMotor(OUT_B, -50,90);
OnFwd(OUT_B,-10);
OnFwd(OUT_A, 35);
OnRev(OUT_C,35);
Wait(10000);
Coast(OUT_ABC);
ExitTo(randomWalk);
}


task findBall()
{
int col;
//start randomWalk;
while(true)
{
col=getColor();
if(col!=NOCOLOR)
{
Acquire(Clock);
COLOR=col;
Release(Clock);
//stop randomWalk;
RotateMotor(OUT_B, -50,90);
OnFwd(OUT_B,-10);
break;
}
//Wait(100);
}
ExitTo(dunk);
}

task dunk(){
//TODO
while(getTouch()!=1)
{
Wait(100);
}
Coast(OUT_AC); //A deplacer dans R2D ac getTouch (walkToBasket)
RotateMotor(OUT_B, -80,100);
Wait(2000);
RotateMotor(OUT_B, 40,200);
Off(OUT_B);

Acquire(Dlock);
DUNKED=1;
Release(Dlock);

ExitTo(findBall);
}


task debug()
{
while(true)
{
TextOut(0, LCD_LINE1, "Compas");
TextOut(0,LCD_LINE2, "     ");
NumOut(0,LCD_LINE2, getCompass());
TextOut(0, LCD_LINE3, "UltraSound");
TextOut(0,LCD_LINE4, "     ");
NumOut(0,LCD_LINE4, getUltraSound());
TextOut(0, LCD_LINE5, "Color");
TextOut(0,LCD_LINE6, "     ");
NumOut(0,LCD_LINE6, getColor());
Wait(500);
}
}


task main()
{
init();
COMPASS_REF=getCompass();
StartTask(findBall);
StartTask(randomWalk);
StartTask(debug);
}

